<?php

namespace Camel\Pattern\Console;

use Illuminate\Console\GeneratorCommand;

/**
 * Class CreateControllerCommand
 *
 * @package Camel\Pattern\Console
 *
 * @author Hieu Nguyen <tronghieudev@gmail.com>
 */
class CreateControllerCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $signature = 'camel:controller {name} {--service=}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new controller';

    /**
     * @var string
     */
    protected $type = 'Controller';

    protected $serviceName;
    protected $serviceDetail;

    /**
     * Get stubs
     */
    protected function getStub()
    {
        // Path stub controller
        return __DIR__ . '/stubs/controller.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace.'\Http\Controllers';
    }

    /**
     * @return bool|null
     *
     * @throws \Exception
     */
    public function handle()
    {
        // Check options
        if (! $this->option('service')) {
            $this->error('Service name is required');
            exit();
        }

        return parent::handle(); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $name
     * @return string
     *
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    protected function buildClass($name)
    {
        $stub = $this->files->get($this->getStub());
        
        return $this->replaceNamespace($stub, $name)
            ->replaceService($stub)
            ->replaceClass($stub, $name);
    }

    /**
     * @param $stub
     *
     * @return mixed
     */
    protected function replaceService(&$stub)
    {
        $stub = str_replace(
            ['#VarService'],
            [lcfirst($this->option('service'))],
            $stub
        );

        return $this;
    }

    /**
     * Replace the namespace for the given stub.
     *
     * @param  string  $stub
     * @param  string  $name
     *
     * @return $this
     */
    protected function replaceNamespace(&$stub, $name)
    {
        $stub = str_replace(
            ['#Namespace'],
            [$this->getNamespace($name)],
            $stub
        );

        return $this;
    }

    /**
     * Replace the class name for the given stub.
     *
     * @param  string  $stub
     * @param  string  $name
     *
     * @return string
     */
    protected function replaceClass($stub, $name)
    {
        $class = str_replace($this->getNamespace($name).'\\', '', $name);

        return str_replace('#ControllerName', $class, $stub);
    }
}