<?php

namespace Camel\Pattern\Console;

use Illuminate\Console\GeneratorCommand;
use Illuminate\Support\Facades\DB;

/**
 * Class CreateFormRequestCommand
 *
 * @package Camel\Pattern\Console
 *
 * @author Hieu Nguyen <tronghieudev@gmail.com>
 */
class CreateFormRequestCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $signature = 'camel:form-request {name} {--type=create} {--table=}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new form request';

    /**
     * @var string
     */
    protected $type = 'Form request';

    protected $tableName;
    protected $tableDetail;
    protected $fieldValid;

    /**
     * Get stubs
     */
    protected function getStub()
    {
        // Path stub form request
        return __DIR__ . '/stubs/form-request.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     *
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace . '\Http\Requests';
    }

    /**
     * @return bool|null
     *
     * @throws \Exception
     */
    public function handle()
    {
        $this->getTableDetail();
        $this->fieldValid = $this->getValidate();

        return parent::handle(); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $name
     * @return string
     *
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    protected function buildClass($name)
    {
        $stub = $this->files->get($this->getStub());

        return $this->replaceNamespace($stub, $name)
            ->replaceFields($stub)
            ->replaceClass($stub, $name);
    }

    /**
     * @param string $stub
     * @param string $name
     *
     * @return $this|string
     */
    protected function replaceClass($stub, $name)
    {
        $class = str_replace($this->getNamespace($name) . '\\', '', $name);

        return str_replace('#FromRequestClass', $class, $stub);
    }

    /**
     * Replace the namespace for the given stub.
     *
     * @param  string  $stub
     * @param  string  $name
     *
     * @return $this
     */
    protected function replaceNamespace(&$stub, $name)
    {
        $stub = str_replace(
            ['#Namespace'],
            [$this->getNamespace($name)],
            $stub
        );

        return $this;
    }

    protected function replaceFields(&$stub)
    {
        $fieldValid = '';
        $i = 1;

        foreach ($this->fieldValid as $key => $valid) {
            $end = ($i < count($this->fieldValid)) ? ", \n\t\t\t" : "";

            $fieldValid .= "'{$key}' => '$valid'" . $end;
            $i++;
        }

        $stub = str_replace(['#Field'], [$fieldValid], $stub);

        return $this;
    }

    /**
     * @throws \Exception
     */
    protected function getTableDetail()
    {
        $this->tableName = $this->option('table');

        $this->getFieldOnTable();
    }

    /**
     * @throws \Exception
     */
    protected function getFieldOnTable()
    {
        try {
            $this->tableDetail = collect(DB::select("SHOW COLUMNS FROM {$this->tableName}"));
        } catch (\Exception $exception) {
            $this->error('Table is not exist !');
            exit();
        }
    }

    protected function checkIsRequired($field)
    {
        return (strtoupper($field->Null) == 'NO') ? 'required' : 'nullable';
    }

    /**
     * @return array
     */
    protected function getFieldNoNeedValid()
    {
        return [
            'id', 'created_at', 'updated_at', 'deleted_at'
        ];
    }

    /**
     * @return array
     */
    protected function getValidate()
    {
        $valid = [];
        $fieldsValid = $this->tableDetail->whereNotIn('Field', $this->getFieldNoNeedValid())->all();

        foreach ($fieldsValid as $field) {
            $validDetail = [];
            $validDetail[] = $this->checkIsRequired($field);

            $valid[$field->Field] = implode('|', $validDetail);
        }

        return $valid;
    }

    /**
     * @return string
     */
    protected function getNameInput()
    {
        return trim($this->argument('name')) . '/' . $this->getNameByType() . 'Request';
    }

    /**
     * @return string
     */
    protected function getNameByType()
    {
        return ucfirst($this->option('type'));
    }
}